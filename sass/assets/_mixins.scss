// 8 point grid breakpoints
@mixin breakpoint($class) {
	@if $class == apples {
    @media (max-width: 320px) { @content; }
  }

  @if $class == xs {
    @media (max-width: $breakpoint-xs) { @content; }
  }

  @else if $class == sm {
    @media (max-width: $breakpoint-sm) { @content; }
  }

  @else if $class == md {
    @media (max-width: $breakpoint-md) { @content; }
  }

  @else if $class == lg {
    @media (max-width: $breakpoint-lg) { @content; }
  }

  @else {
    @media (max-width: $class) { @content; }
  }
}


@mixin breakpoint-from($class) {
    @if $class == apples {
        @media (min-width: 321px) { @content; }
    }

    @if $class == xs {
        @media (min-width: $breakpoint-xs + 1px) { @content; }
    }

    @else if $class == sm {
        @media (min-width: $breakpoint-sm + 1px) { @content; }
    }

    @else if $class == md {
        @media (min-width: $breakpoint-md + 1px) { @content; }
    }

    @else if $class == lg {
        @media (min-width: $breakpoint-lg + 1px) { @content; }
    }

    @else {
        @media (min-width: $class) { @content; }
    }
}

// make container mixin
@mixin container {
    display: flex;
    max-width: $container-lg-width;
    margin: 0 auto;
    flex-wrap: wrap;

    @media (max-width: $breakpoint-lg) {
        max-width: $container-md-width;
    }

    @media (max-width: $breakpoint-md) {
        max-width: $container-sm-width;
    }

    @media (max-width: $breakpoint-sm) {
        max-width: $container-xs-width;
    }
}

// make column mixin
@mixin column($number) {
  display: block;
  padding-left: $gutter;
  padding-right: $gutter;
  width: percentage($number);
}

@mixin push($number) {
	margin-left: percentage($number);
}

// pseudo elements
@mixin ps($display: block, $pos: absolute, $content: ''){
  display: $display;
  position: $pos;
  content: $content;
}

// gradient
@mixin gradient($start-color, $end-color, $orientation) {
  background: $start-color;
  @if $orientation == 'ver' {
    background: -webkit-linear-gradient(top, $start-color, $end-color);
    background: linear-gradient(to bottom, $start-color, $end-color);
  } @else if $orientation == 'hor' {
    background: -webkit-linear-gradient(left, $start-color, $end-color);
    background: linear-gradient(to right, $start-color, $end-color);
  } @else {
    background: -webkit-radial-gradient(center, ellipse cover, $start-color, $end-color);
    background: radial-gradient(ellipse at center, $start-color, $end-color);
  }
}

// arrow
@mixin arrow($direction, $size, $color) {
   width: 0;
   height: 0;
   @if ($direction == left) {
      border-top: $size solid transparent;
      border-bottom: $size solid transparent;
      border-right: $size solid $color;
   }
   @else if ($direction == right) {
      border-top: $size solid transparent;
      border-bottom: $size solid transparent;
      border-left: $size solid $color;
   }
   @else if ($direction == down) {
      border-left: $size solid transparent;
      border-right: $size solid transparent;
      border-top: $size solid $color;
   }
   @else {
      border-left: $size solid transparent;
      border-right: $size solid transparent;
      border-bottom: $size solid $color;
   }
}
